// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ===========================================
// USER FLOWS DOCUMENTATION
// ===========================================
//
// 1. SUPERADMIN FLOW:
//    - Profile only (minimal data: userId, email, status, role)
//    - No KYCProfile needed
//    - Direct dashboard access
//    - No Bridge Protocol integration
//
// 2. REGULAR USER FLOW:
//    - Profile (basic: userId, email, status, role)  
//    - KYCProfile (full personal data for Bridge Protocol)
//    - Bridge Protocol verification required
//    - Customer ID assigned if approved
//    - Detailed tracking of verification status
//
// ===========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum WalletChain {
  solana
  base
}

enum WalletTag {
  general_use
  p2p
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  active
  disabled
  deleted
}

enum KYCStatus {
  active
  awaiting_questionnaire
  awaiting_ubo
  incomplete
  not_started
  offboarded
  paused
  rejected
  under_review
}

enum CustomerType {
  individual
  business
}

enum ExpectedMonthlyPaymentsUSD {
  zero_4999             // $0 - $4,999
  five_thousand_9999    // $5,000 - $9,999
  ten_thousand_49999    // $10,000 - $49,999
  fifty_thousand_plus   // $50,000+
}

enum EmploymentStatus {
  employed              // Employed
  homemaker             // Homemaker
  retired               // Retired
  self_employed         // Self Employed
  student               // Student
  unemployed            // Unemployed
}

enum AccountPurpose {
  charitable_donations
  ecommerce_retail_payments
  investment_purposes
  operating_a_company
  other
  payments_to_friends_or_family_abroad
  personal_or_living_expenses
  protect_wealth
  purchase_goods_and_services
  receive_payment_for_freelancing
  receive_salary
}

enum SourceOfFunds {
  salary
  business_income
  investment_returns
  inheritance
  government_benefits
  loans
  other
}

enum DocumentType {
  drivers_license       // Driver's License
  matriculate_id        // Matriculate ID
  military_id           // Military ID
  national_id           // National ID
  passport              // Passport
  permanent_residency_id // Permanent Residency ID
  state_or_provisional_id // State or Provisional ID
  visa                  // Visa
}

enum DocumentPurpose {
  // Note: This enum is used as an array of strings in the application
  proof_of_account_purpose
  proof_of_address
  proof_of_individual_name_change
  proof_of_relationship
  proof_of_source_of_funds
  proof_of_source_of_wealth
  proof_of_tax_identification
  other
}

enum EndorsementType {
  base
  sepa
  spei
}

enum CapabilityStatus {
  pending
  active
  inactive
  rejected
}

enum EndorsementStatus {
  incomplete
  approved
  revoked
}

enum EventType {
  USER_SIGNED_UP
  USER_SUBMITTED_KYC
  USER_KYC_UNDER_VERIFICATION
  USER_KYC_APPROVED
  USER_KYC_REJECTED
  USER_WALLET_CREATED
  USER_CARD_CREATED // Added for card tracking
  SYSTEM_CONFIG_UPDATED
  SYSTEM_CONFIG_CREATED
  SYSTEM_CONFIG_DELETED
}

enum EventModule {
  AUTH
  KYC
  PROFILE
  WALLET
  SYSTEM_CONFIG
}

enum ConfigType {
  FEE
  LIMIT
  FEATURE_FLAG
  INTEGRATION_SETTING
}

enum FeeType {
  DEVELOPER_FEE
  CREDIT_CARD_EMISSION_FEE
  TRANSACTION_FEE
  WITHDRAWAL_FEE
  DEPOSIT_FEE
}

enum ConfigStatus {
  active
  inactive
  deprecated
}

model Profile {
  id            String               @id @default(cuid())
  userId        String               @unique
  createdAt     DateTime             @default(now())
updatedAt     DateTime             @updatedAt

  // Basic Information (for all users)
  email         String?              @unique // From Supabase auth
  firstName     String?              @map("first_name") // Basic name for all users
  lastName      String?              @map("last_name")  // Basic name for all users
  
  // User Management
  status        UserStatus           @default(active)
  role          UserRole             @default(USER)
  userTag       String?              @map("user_tag") @unique
  
  // Relations
  kycProfile    KYCProfile?          // Only for USER role - Bridge Protocol integration
  events        Event[]              // Track user events
  wallets       Wallet[]             // User's blockchain wallets
  liquidationAddresses LiquidationAddress[] // User's liquidation addresses
  cards         Card[]               // User's PayWithMoon debit cards (USER role only)
  
  @@index([userId])
  @@index([status])
  @@index([role])
  @@index([email])
  @@map("profiles")
}

model KYCProfile {
  id            String               @id @default(cuid())
  profileId     String               @unique @map("profile_id")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  
  // Bridge.xyz Integration
  bridgeCustomerId String?           @unique @map("bridge_customer_id")
  customerType     CustomerType      @default(individual) @map("customer_type")
  
  // Personal Information (Required for Bridge Protocol)
  firstName     String?              @map("first_name") // string length between 2 and 1024
  middleName    String?              @map("middle_name") // string length between 2 and 1024
  lastName      String?              @map("last_name") // string length between 2 and 1024
  email         String?              @unique // string length between 2 and 1024
  phone         String?              // Format: +12223334444 // string length between 2 and 1024
  birthDate     DateTime?            @map("birth_date") // string between 10 and 10 characters in format yyyy-mm-dd, must be at least 18 years old
  nationality   String?              // ISO 3166-1 three-character country code // string length between 2 and 1024
  
  // Bridge Protocol Verification Status
  kycStatus     KYCStatus            @default(not_started) @map("kyc_status")
  kycSubmittedAt DateTime?           @map("kyc_submitted_at")
  kycApprovedAt DateTime?            @map("kyc_approved_at")
  kycRejectedAt DateTime?            @map("kyc_rejected_at")
  kycRejectionReason String?         @map("kyc_rejection_reason")
  signedAgreementId String?          @map("signed_agreement_id") // this is only for bridge's production environment
  
  // Verification Timestamps
  verifiedSelfieAt DateTime?         @map("verified_selfie_at")
  completedCustomerSafetyCheckAt DateTime? @map("completed_customer_safety_check_at")
  
  // High Risk Fields (Required for high risk customers)
  accountPurpose AccountPurpose?     @map("account_purpose")
  accountPurposeOther String?        @map("account_purpose_other")
  employmentStatus EmploymentStatus? @map("employment_status")
  expectedMonthlyPaymentsUsd ExpectedMonthlyPaymentsUSD? @map("expected_monthly_payments_usd")
  mostRecentOccupation String?       @map("most_recent_occupation")
  // actingAsIntermediary Boolean?      @map("acting_as_intermediary") // assume false always for now
  // sourceOfFunds SourceOfFunds?       @map("source_of_funds") // assume unnecessary for now, as we wont provide services for restricted countries
  
  // Bridge Protocol Response Fields
  payinCrypto CapabilityStatus?      @default(pending) @map("payin_crypto")
  payoutCrypto CapabilityStatus?     @default(pending) @map("payout_crypto")
  payinFiat CapabilityStatus?        @default(pending) @map("payin_fiat")
  payoutFiat CapabilityStatus?       @default(pending) @map("payout_fiat")
  futureRequirementsDue String[]     @default([]) @map("future_requirements_due")
  requirementsDue String[]           @default([]) @map("requirements_due")
  hasAcceptedTermsOfService Boolean? @default(false) @map("has_accepted_terms_of_service")
  
  // Bridge Protocol Debug Data
  bridgeRawRequest Json?            @map("bridge_raw_request") // Full Bridge Protocol API request for debugging
  bridgeRawResponse Json?            @map("bridge_raw_response") // Full Bridge Protocol API response for debugging
  
  // Relations
  profile       Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  address       Address?             // One-to-one relationship
  identifyingInfo IdentifyingInformation[]
  documents     Document[]
  rejectionReasons RejectionReason[]
  endorsements  Endorsement[]
  
  @@index([kycStatus])
  @@index([bridgeCustomerId])
  @@map("kyc_profiles")
}

model Address {
  id          String   @id @default(cuid())
  kycProfileId String   @unique @map("kyc_profile_id") // Changed to unique for one-to-one
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Required Address Fields
  streetLine1   String   @map("street_line_1") // string length between 2 and 1024
  city          String   // string length between 2 and 1024
  country       String   // ISO 3166-1 three-character country code // string length between 2 and 1024

  // Optional Address Fields
  streetLine2   String?  @map("street_line_2") // string length between 2 and 1024
  subdivision   String?  // ISO 3166-2 subdivision code (for US addresses) // string length between 2 and 1024
  postalCode    String?  @map("postal_code") // string length between 2 and 1024
  
  // Relations
  kycProfile KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

model Document {
  id          String   @id @default(cuid())
  kycProfileId String   @map("kyc_profile_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Document Information
  purposes    DocumentPurpose[] // Array of purposes
  fileUrl     String?           @map("file_url")        // Base64 encoded file or URL, max size 24 MB, valid types: .pdf, .jpeg, .jpg, .png, .heic, .tif
  fileSize    Int?              @map("file_size")       // Size in bytes
  description String?
  
  // Relations
  kycProfile KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)
  
  @@index([kycProfileId])
  @@map("documents")
}

model IdentifyingInformation {
  id          String   @id @default(cuid())
  kycProfileId String   @map("kyc_profile_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Document Information
  type          DocumentType @map("document_type")
  issuingCountry String      @map("issuing_country") // ISO 3166-1 three-character country code
  number        String?      // Document number
  description   String?      // Description when type is "other"
  expiration    DateTime?    // Expiration date (yyyy-mm-dd)
  
  // Document Images
  imageFront    String?      @map("image_front")     // Base64 encoded image, max 24 MB, min 200x200px, valid types: .pdf, .jpeg, .jpg, .png, .heic, .tif
  imageBack     String?      @map("image_back")      // Base64 encoded image, max 24 MB, min 200x200px, valid types: .pdf, .jpeg, .jpg, .png, .heic, .tif
  
  // Relations
  kycProfile KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)
  
  @@index([kycProfileId])
  @@index([type])
  @@map("identifying_information")
}

model RejectionReason {
  id          String   @id @default(cuid())
  kycProfileId String   @map("kyc_profile_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Bridge Protocol Response Fields
  developerReason String  @map("developer_reason")
  reason         String
  bridgeCreatedAt DateTime? @map("bridge_created_at")
  
  // Relations
  kycProfile KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)
  
  @@index([kycProfileId])
  @@map("rejection_reasons")
}

model Endorsement {
  id          String   @id @default(cuid())
  kycProfileId String   @map("kyc_profile_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Bridge Protocol Response Fields
  name          EndorsementType   @map("endorsement_type")
  status        EndorsementStatus @default(incomplete)
  
  // Requirements object from Bridge API response
  requirements  Json?             // Contains: issues[], missing, pending[], complete[]
  
  // Relations
  kycProfile KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)
  
  @@index([kycProfileId])
  @@index([name])
  @@map("endorsements")
}

model Event {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Event Information
  type          EventType
  module        EventModule
  description   String?     // Optional description for additional context
  
  // User Reference
  profileId     String      @map("profile_id")
  
  // Optional System Configuration References
  systemConfigId String?    @map("system_config_id")
  feeConfigId   String?     @map("fee_config_id")
  
  // Metadata
  metadata      Json?       // Flexible field for additional event data
  
  // Relations
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  systemConfig  SystemConfig? @relation(fields: [systemConfigId], references: [id])
  feeConfig     FeeConfig?  @relation(fields: [feeConfigId], references: [id])
  
  @@index([profileId])
  @@index([type])
  @@index([module])
  @@index([createdAt])
  @@index([systemConfigId])
  @@index([feeConfigId])
  @@map("events")
}

model Wallet {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Internal Wallet Management
  profileId     String      @map("profile_id")
  walletTag     WalletTag   @default(general_use) @map("wallet_tag")
  isActive      Boolean     @default(true) @map("is_active")
  
  // Bridge API Integration
  bridgeWalletId String     @unique @map("bridge_wallet_id") // Bridge API wallet ID
  chain         WalletChain
  address       String
  bridgeTags    String[]    @default([]) @map("bridge_tags") // Tags from Bridge API
  
  // Bridge Protocol Timestamps
  bridgeCreatedAt DateTime? @map("bridge_created_at")
  bridgeUpdatedAt DateTime? @map("bridge_updated_at")
  
  // Relations
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  transactions  Transaction[] // One-to-many relationship with transactions
  liquidationAddresses LiquidationAddress[] // One-to-many relationship with liquidation addresses
  
  @@index([profileId])
  @@index([bridgeWalletId])
  @@index([address])
  @@map("wallets")
}

model Transaction {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Bridge API Transaction Data
  bridgeTransactionId String @unique @map("bridge_transaction_id") // Unique identifier from Bridge API
  walletId      String      @map("wallet_id")
  
  // Transaction Details
  amount        String      // Amount as string (from Bridge API)
  developerFee  String?     @map("developer_fee") // Fee as string (from Bridge API)
  customerId    String      @map("customer_id") // Bridge customer ID
  
  // Source Information
  sourcePaymentRail String?  @map("source_payment_rail") // e.g., "solana", "base", etc.
  sourceCurrency String?     @map("source_currency") // e.g., "usdc", "usdt", etc.
  
  // Destination Information  
  destinationPaymentRail String? @map("destination_payment_rail") // e.g., "solana", "base", etc.
  destinationCurrency String?   @map("destination_currency") // e.g., "usdc", "usdt", etc.
  
  // Timestamps from Bridge API
  bridgeCreatedAt DateTime  @map("bridge_created_at")
  bridgeUpdatedAt DateTime  @map("bridge_updated_at")
  
  // Raw Bridge API Response (for debugging/future use)
  bridgeRawData Json?       @map("bridge_raw_data")
  
  // Relations
  wallet        Wallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@index([walletId])
  @@index([bridgeTransactionId])
  @@index([customerId])
  @@index([bridgeCreatedAt])
  @@map("transactions")
}

model TransactionSync {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Sync Tracking
  walletId      String      @map("wallet_id")
  lastSyncAt    DateTime    @map("last_sync_at")
  lastSyncTransactionCount Int @default(0) @map("last_sync_transaction_count")
  newTransactionsFound Int  @default(0) @map("new_transactions_found")
  
  // Sync Status
  syncStatus    String      @default("success") @map("sync_status") // success, error, partial
  errorMessage  String?     @map("error_message")
  
  // Bridge API Pagination Info
  lastProcessedBridgeCreatedAt DateTime? @map("last_processed_bridge_created_at")
  
  @@index([walletId])
  @@index([lastSyncAt])
  @@map("transaction_syncs")
}

model LiquidationAddress {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Bridge API Liquidation Address Data
  bridgeLiquidationId String @unique @map("bridge_liquidation_id") // Bridge API liquidation address ID
  profileId     String      @map("profile_id") // Reference to Profile
  walletId      String?      @map("wallet_id") // Reference to Wallet
  customerId    String      @map("customer_id") // Bridge customer ID
  
  // Liquidation Address Details
  chain         String      // Source chain (e.g., "polygon")
  address       String      // Source address for liquidation
  currency      String      // Source currency (e.g., "usdc")
  
  // Destination Information
  destinationPaymentRail String @map("destination_payment_rail") // Destination chain (e.g., "solana")
  destinationCurrency String    @map("destination_currency") // Destination currency (e.g., "usdc")
  destinationAddress String     @map("destination_address") // Destination wallet address
  
  // Bridge Protocol Status
  state         String      @default("active") // active, inactive, etc.
  
  // Bridge Protocol Timestamps
  bridgeCreatedAt DateTime  @map("bridge_created_at")
  bridgeUpdatedAt DateTime  @map("bridge_updated_at")
  
  // Relations
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  wallet        Wallet?     @relation(fields: [walletId], references: [id])

  @@index([profileId])
  @@index([customerId])
  @@index([bridgeLiquidationId])
  @@index([chain])
  @@index([state])
  @@map("liquidation_addresses")
}

model Card {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // PayWithMoon Integration (USER profiles only)
  profileId     String      @map("profile_id")
  moonCardId    String      @unique @map("moon_card_id") // PayWithMoon card ID
  
  // Card Financial Information
  balance       Decimal     @db.Decimal(10, 2) // Current balance
  availableBalance Decimal  @map("available_balance") @db.Decimal(10, 2) // Available balance
  
  // Card Details
  expiration    DateTime    // Full expiration timestamp from PayWithMoon
  displayExpiration String  @map("display_expiration") // Display format like "12/24"
  cardProductId String      @map("card_product_id") // PayWithMoon card product ID
  
  // Sensitive Card Information (encrypted at application level)
  pan           String      // Primary Account Number (card number) - should be encrypted
  cvv           String      // Card Verification Value - should be encrypted
  supportToken  String      @map("support_token") // PayWithMoon support token
  
  // Card Status
  terminated    Boolean     @default(false) // If card is terminated
  frozen        Boolean     @default(false) // If card is frozen
  isActive      Boolean     @default(true) @map("is_active") // Our internal status flag
  
  // Relations
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@index([profileId])
  @@index([moonCardId])
  @@index([terminated])
  @@index([frozen])
  @@index([isActive])
  @@map("cards")
}

// ===========================================
// SYSTEM CONFIGURATION MODELS
// ===========================================
//
// Purpose: Manage configurable system settings including fees,
// limits, feature flags, and integration settings that can be
// modified from the dashboard without code changes.
//
// Access: Only SUPERADMIN and ADMIN roles can modify these settings
//
// ===========================================

model SystemConfig {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Configuration Identity
  key           String      @unique // Unique identifier for the config (e.g., "developer_fee", "credit_card_emission_fee")
  name          String      // Human-readable name (e.g., "Developer Fee", "Credit Card Emission Fee")
  description   String?     // Optional description of what this config controls
  
  // Configuration Type and Status
  type          ConfigType  // FEE, LIMIT, FEATURE_FLAG, INTEGRATION_SETTING
  status        ConfigStatus @default(active)
  
  // Configuration Value (JSON for flexibility)
  value         Json        // The actual configuration value (can be number, string, boolean, object, array)
  defaultValue  Json?       // Default value for this configuration
  
  // Validation and Constraints
  minValue      Json?       // Minimum allowed value (for numeric configs)
  maxValue      Json?       // Maximum allowed value (for numeric configs)
  allowedValues Json?       // Array of allowed values (for enum-like configs)
  validationRule String?    // Custom validation rule or regex pattern
  
  // Metadata
  category      String?     // Grouping configs (e.g., "fees", "limits", "integrations")
  tags          String[]    @default([]) // For additional categorization
  
  // Audit Trail
  lastModifiedBy String?    @map("last_modified_by") // Profile ID of who last modified this
  lastModifiedAt DateTime?  @map("last_modified_at")
  
  // Relations
  configHistory SystemConfigHistory[] // Track all changes to this config
  events        Event[]     // Track system events related to this config
  
  @@index([key])
  @@index([type])
  @@index([status])
  @@index([category])
  @@map("system_configs")
}

model SystemConfigHistory {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  
  // Configuration Reference
  configId      String      @map("config_id")
  
  // Change Information
  oldValue      Json?       @map("old_value") // Previous value
  newValue      Json        @map("new_value") // New value
  changeReason  String?     @map("change_reason") // Optional reason for the change
  
  // Audit Information
  modifiedBy    String      @map("modified_by") // Profile ID of who made the change
  modifiedAt    DateTime    @default(now()) @map("modified_at")
  
  // Relations
  config        SystemConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@index([configId])
  @@index([modifiedAt])
  @@map("system_config_history")
}

model FeeConfig {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Fee Identity
  feeType       FeeType     @map("fee_type") // DEVELOPER_FEE, CREDIT_CARD_EMISSION_FEE, etc.
  name          String      // Human-readable name
  description   String?     // Description of what this fee is for
  
  // Fee Structure
  amount        Decimal     @db.Decimal(10, 4) // Fee amount (supports 4 decimal places for precision)
  currency      String      @default("USD") // Currency code (USD, EUR, etc.)
  feeStructure  String      @default("percentage") @map("fee_structure") // percentage, fixed_amount, tiered
  
  // Fee Conditions
  minAmount     Decimal?    @map("min_amount") @db.Decimal(10, 2) // Minimum transaction amount to apply fee
  maxAmount     Decimal?    @map("max_amount") @db.Decimal(10, 2) // Maximum fee amount (for percentage fees)
  isActive      Boolean     @default(true) @map("is_active")
  
  // Fee Application
  appliesTo     String[]    @default([]) @map("applies_to") // Array of transaction types, chains, or conditions
  excludedFrom  String[]    @default([]) @map("excluded_from") // Array of excluded transaction types or conditions
  
  // Metadata
  category      String?     // Grouping fees (e.g., "crypto", "cards", "general")
  tags          String[]    @default([])
  
  // Audit Trail
  lastModifiedBy String?    @map("last_modified_by") // Profile ID of who last modified this
  lastModifiedAt DateTime?  @map("last_modified_at")
  
  // Relations
  feeHistory    FeeConfigHistory[] // Track all changes to this fee
  events        Event[]     // Track system events related to this fee
  
  @@index([feeType])
  @@index([isActive])
  @@index([category])
  @@map("fee_configs")
}

model FeeConfigHistory {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  
  // Fee Reference
  feeId         String      @map("fee_id")
  
  // Change Information
  oldAmount     Decimal?    @map("old_amount") @db.Decimal(10, 4)
  newAmount     Decimal     @map("new_amount") @db.Decimal(10, 4)
  oldCurrency   String?     @map("old_currency")
  newCurrency   String      @map("new_currency")
  changeReason  String?     @map("change_reason")
  
  // Audit Information
  modifiedBy    String      @map("modified_by") // Profile ID of who made the change
  modifiedAt    DateTime    @default(now()) @map("modified_at")
  
  // Relations
  fee           FeeConfig   @relation(fields: [feeId], references: [id], onDelete: Cascade)
  
  @@index([feeId])
  @@index([modifiedAt])
  @@map("fee_config_history")
}

