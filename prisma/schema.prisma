generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                   String                 @id @default(cuid())
  userId               String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  role                 UserRole               @default(USER)
  email                String?                @unique
  firstName            String?                @map("first_name")
  lastName             String?                @map("last_name")
  status               UserStatus             @default(active)
  userTag              String?                @unique @map("user_tag")
  cardBalanceAdditions CardBalanceAddition[]
  cards                Card[]
  DepositQrRequest     DepositQrRequest[]
  events               Event[]
  externalAccounts     ExternalAccount[]
  kycProfile           KYCProfile?
  liquidationAddresses LiquidationAddress[]
  transfer_sync_status transfer_sync_status[]
  user_preferences     user_preferences?
  user_sessions        user_sessions[]
  virtualAccounts      VirtualAccount[]
  wallets              Wallet[]

  @@index([userId])
  @@index([status])
  @@index([role])
  @@index([email])
  @@map("profiles")
}

model KYCProfile {
  id                             String                      @id @default(cuid())
  profileId                      String                      @unique @map("profile_id")
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt
  bridgeCustomerId               String?                     @unique @map("bridge_customer_id")
  customerType                   CustomerType                @default(individual) @map("customer_type")
  middleName                     String?                     @map("middle_name")
  kycStatus                      KYCStatus                   @default(not_started) @map("kyc_status")
  kycSubmittedAt                 DateTime?                   @map("kyc_submitted_at")
  kycApprovedAt                  DateTime?                   @map("kyc_approved_at")
  kycRejectedAt                  DateTime?                   @map("kyc_rejected_at")
  kycRejectionReason             String?                     @map("kyc_rejection_reason")
  signedAgreementId              String?                     @map("signed_agreement_id")
  verifiedSelfieAt               DateTime?                   @map("verified_selfie_at")
  completedCustomerSafetyCheckAt DateTime?                   @map("completed_customer_safety_check_at")
  accountPurpose                 AccountPurpose?             @map("account_purpose")
  accountPurposeOther            String?                     @map("account_purpose_other")
  employmentStatus               EmploymentStatus?           @map("employment_status")
  expectedMonthlyPaymentsUsd     ExpectedMonthlyPaymentsUSD? @map("expected_monthly_payments_usd")
  mostRecentOccupation           String?                     @map("most_recent_occupation")
  futureRequirementsDue          String[]                    @default([]) @map("future_requirements_due")
  hasAcceptedTermsOfService      Boolean?                    @default(false) @map("has_accepted_terms_of_service")
  payinCrypto                    CapabilityStatus?           @default(pending) @map("payin_crypto")
  payinFiat                      CapabilityStatus?           @default(pending) @map("payin_fiat")
  payoutCrypto                   CapabilityStatus?           @default(pending) @map("payout_crypto")
  payoutFiat                     CapabilityStatus?           @default(pending) @map("payout_fiat")
  requirementsDue                String[]                    @default([]) @map("requirements_due")
  birthDate                      DateTime?                   @map("birth_date")
  email                          String?                     @unique
  firstName                      String?                     @map("first_name")
  lastName                       String?                     @map("last_name")
  nationality                    String?
  phone                          String?
  bridgeRawResponse              Json?                       @map("bridge_raw_response")
  bridgeRawRequest               Json?                       @map("bridge_raw_request")
  address                        Address?
  documents                      Document[]
  endorsements                   Endorsement[]
  identifyingInfo                IdentifyingInformation[]
  profile                        Profile                     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  rejectionReasons               RejectionReason[]

  @@index([kycStatus])
  @@index([bridgeCustomerId])
  @@map("kyc_profiles")
}

model Address {
  id           String     @id @default(cuid())
  kycProfileId String     @unique @map("kyc_profile_id")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  streetLine1  String     @map("street_line_1")
  city         String
  country      String
  streetLine2  String?    @map("street_line_2")
  subdivision  String?
  postalCode   String?    @map("postal_code")
  kycProfile   KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Document {
  id           String            @id @default(cuid())
  kycProfileId String            @map("kyc_profile_id")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  purposes     DocumentPurpose[]
  fileUrl      String?           @map("file_url")
  fileSize     Int?              @map("file_size")
  description  String?
  kycProfile   KYCProfile        @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)

  @@index([kycProfileId])
  @@map("documents")
}

model IdentifyingInformation {
  id             String       @id @default(cuid())
  kycProfileId   String       @map("kyc_profile_id")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  type           DocumentType @map("document_type")
  issuingCountry String       @map("issuing_country")
  number         String?
  description    String?
  expiration     DateTime?
  imageFront     String?      @map("image_front")
  imageBack      String?      @map("image_back")
  kycProfile     KYCProfile   @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)

  @@index([kycProfileId])
  @@index([type])
  @@map("identifying_information")
}

model RejectionReason {
  id              String     @id @default(cuid())
  kycProfileId    String     @map("kyc_profile_id")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  developerReason String     @map("developer_reason")
  reason          String
  bridgeCreatedAt DateTime?  @map("bridge_created_at")
  kycProfile      KYCProfile @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)

  @@index([kycProfileId])
  @@map("rejection_reasons")
}

model Endorsement {
  id           String            @id @default(cuid())
  kycProfileId String            @map("kyc_profile_id")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  name         EndorsementType   @map("endorsement_type")
  status       EndorsementStatus @default(incomplete)
  requirements Json?
  kycProfile   KYCProfile        @relation(fields: [kycProfileId], references: [id], onDelete: Cascade)

  @@index([kycProfileId])
  @@index([name])
  @@map("endorsements")
}

model Event {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  type           EventType
  module         EventModule
  description    String?
  profileId      String        @map("profile_id")
  metadata       Json?
  feeConfigId    String?       @map("fee_config_id")
  systemConfigId String?       @map("system_config_id")
  feeConfig      FeeConfig?    @relation(fields: [feeConfigId], references: [id])
  profile        Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  systemConfig   SystemConfig? @relation(fields: [systemConfigId], references: [id])

  @@index([profileId])
  @@index([type])
  @@index([module])
  @@index([createdAt])
  @@index([systemConfigId])
  @@index([feeConfigId])
  @@map("events")
}

model Wallet {
  id                   String               @id @default(cuid())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  profileId            String               @map("profile_id")
  walletTag            WalletTag            @default(general_use) @map("wallet_tag")
  isActive             Boolean              @default(true) @map("is_active")
  bridgeWalletId       String               @unique @map("bridge_wallet_id")
  chain                WalletChain
  address              String
  bridgeTags           String[]             @default([]) @map("bridge_tags")
  bridgeCreatedAt      DateTime?            @map("bridge_created_at")
  bridgeUpdatedAt      DateTime?            @map("bridge_updated_at")
  peyoWalletId         String?              @unique @map("peyo_wallet_id")
  walletColor          String               @default("#6366F1") @map("wallet_color")
  walletIcon           String               @default("wallet") @map("wallet_icon")
  walletName           String               @default("Mi Billetera Principal") @map("wallet_name")
  display_order        Int                  @default(0)
  is_default           Boolean              @default(false)
  last_selected_at     DateTime?
  DepositQrRequest     DepositQrRequest[]
  liquidationAddresses LiquidationAddress[]
  receivedTransactions Transaction[]        @relation("TransactionRecipientWallet")
  sentTransactions     Transaction[]        @relation("TransactionSenderWallet")
  transactions         Transaction[]
  profile              Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([bridgeWalletId])
  @@index([address])
  @@map("wallets")
}

model Transaction {
  id                     String   @id @default(cuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  bridgeTransactionId    String   @unique @map("bridge_transaction_id")
  walletId               String   @map("wallet_id")
  amount                 String
  developerFee           String?  @map("developer_fee")
  customerId             String   @map("customer_id")
  sourcePaymentRail      String?  @map("source_payment_rail")
  sourceCurrency         String?  @map("source_currency")
  destinationPaymentRail String?  @map("destination_payment_rail")
  destinationCurrency    String?  @map("destination_currency")
  bridgeCreatedAt        DateTime @map("bridge_created_at")
  bridgeUpdatedAt        DateTime @map("bridge_updated_at")
  bridgeRawData          Json?    @map("bridge_raw_data")
  recipientWalletId      String?  @map("recipient_wallet_id")
  senderWalletId         String?  @map("sender_wallet_id")
  display_category       String?
  is_favorite            Boolean  @default(false)
  user_notes             String?
  blockchain_tx_id       String?
  confirmation_count     Int?
  description            String?
  external_account_id    String?
  liquidation_address_id String?
  required_confirmations Int?
  status                 String?
  transfer_id            String?
  type                   String?
  recipientWallet        Wallet?  @relation("TransactionRecipientWallet", fields: [recipientWalletId], references: [id])
  senderWallet           Wallet?  @relation("TransactionSenderWallet", fields: [senderWalletId], references: [id])
  wallet                 Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([bridgeTransactionId])
  @@index([customerId])
  @@index([bridgeCreatedAt])
  @@index([senderWalletId])
  @@index([recipientWalletId])
  @@map("transactions")
}

model TransactionSync {
  id                           String    @id @default(cuid())
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  walletId                     String    @map("wallet_id")
  lastSyncAt                   DateTime  @map("last_sync_at")
  lastSyncTransactionCount     Int       @default(0) @map("last_sync_transaction_count")
  newTransactionsFound         Int       @default(0) @map("new_transactions_found")
  syncStatus                   String    @default("success") @map("sync_status")
  errorMessage                 String?   @map("error_message")
  lastProcessedBridgeCreatedAt DateTime? @map("last_processed_bridge_created_at")

  @@index([walletId])
  @@index([lastSyncAt])
  @@map("transaction_syncs")
}

model LiquidationAddress {
  id                     String               @id @default(cuid())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  bridgeLiquidationId    String               @unique @map("bridge_liquidation_id")
  profileId              String               @map("profile_id")
  customerId             String               @map("customer_id")
  chain                  String
  address                String
  currency               String
  destinationPaymentRail String               @map("destination_payment_rail")
  destinationCurrency    String               @map("destination_currency")
  destinationAddress     String               @map("destination_address")
  state                  String               @default("active")
  bridgeCreatedAt        DateTime             @map("bridge_created_at")
  bridgeUpdatedAt        DateTime             @map("bridge_updated_at")
  walletId               String?              @map("wallet_id")
  profile                Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  wallet                 Wallet?              @relation(fields: [walletId], references: [id])
  liquidation_drains     liquidation_drains[]
  virtual_accounts       VirtualAccount[]

  @@index([profileId])
  @@index([customerId])
  @@index([bridgeLiquidationId])
  @@index([chain])
  @@index([state])
  @@map("liquidation_addresses")
}

model ExternalAccount {
  id                      String              @id @default(cuid())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  profileId               String              @map("profile_id")
  customerId              String              @map("customer_id")
  bridgeExternalAccountId String              @unique @map("bridge_external_account_id")
  accountType             ExternalAccountType @map("account_type")
  currency                String              @default("USD")
  bankName                String?             @map("bank_name")
  accountOwnerName        String?             @map("account_owner_name")
  accountOwnerType        CustomerType?       @map("account_owner_type")
  firstName               String?             @map("first_name")
  lastName                String?             @map("last_name")
  businessName            String?             @map("business_name")
  last4                   String?             @map("last_4")
  routingNumber           String?             @map("routing_number")
  checkingOrSavings       CheckingOrSavings?  @map("checking_or_savings")
  iban                    String?
  bic                     String?
  ibanCountry             String?             @map("iban_country")
  swiftAccountNumber      String?             @map("swift_account_number")
  swiftBic                String?             @map("swift_bic")
  swiftCountry            String?             @map("swift_country")
  streetLine1             String?             @map("street_line_1")
  streetLine2             String?             @map("street_line_2")
  city                    String?
  state                   String?
  postalCode              String?             @map("postal_code")
  country                 String?
  active                  Boolean             @default(true)
  beneficiaryAddressValid Boolean?            @default(false) @map("beneficiary_address_valid")
  bridgeCreatedAt         DateTime?           @map("bridge_created_at")
  bridgeUpdatedAt         DateTime?           @map("bridge_updated_at")
  bridgeRawData           Json?               @map("bridge_raw_data")
  clabe_number            String?
  profile                 Profile             @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([customerId])
  @@index([bridgeExternalAccountId])
  @@index([accountType])
  @@index([active])
  @@map("external_accounts")
}

model Card {
  id                String                @id @default(cuid())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  profileId         String                @map("profile_id")
  moonCardId        String                @unique @map("moon_card_id")
  balance           Decimal               @db.Decimal(10, 2)
  availableBalance  Decimal               @map("available_balance") @db.Decimal(10, 2)
  expiration        DateTime
  displayExpiration String                @map("display_expiration")
  cardProductId     String                @map("card_product_id")
  pan               String
  cvv               String
  supportToken      String                @map("support_token")
  terminated        Boolean               @default(false)
  frozen            Boolean               @default(false)
  isActive          Boolean               @default(true) @map("is_active")
  balanceAdditions  CardBalanceAddition[]
  profile           Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([moonCardId])
  @@index([terminated])
  @@index([frozen])
  @@index([isActive])
  @@map("cards")
}

model VirtualAccount {
  id                     String                   @id @default(cuid())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  bridgeVirtualAccountId String                   @unique @map("bridge_virtual_account_id")
  profileId              String                   @map("profile_id")
  customerId             String                   @map("customer_id")
  accountType            VirtualAccountType       @default(iban) @map("account_type")
  accountNumber          String                   @map("account_number")
  routingNumber          String?                  @map("routing_number")
  bankName               String                   @map("bank_name")
  bankCode               String?                  @map("bank_code")
  country                String
  currency               String                   @default("USD")
  status                 VirtualAccountStatus     @default(active)
  isActive               Boolean                  @default(true) @map("is_active")
  currentBalance         Decimal                  @default(0) @map("current_balance") @db.Decimal(20, 8)
  availableBalance       Decimal                  @default(0) @map("available_balance") @db.Decimal(20, 8)
  pendingBalance         Decimal                  @default(0) @map("pending_balance") @db.Decimal(20, 8)
  description            String?
  tags                   String[]                 @default([])
  metadata               Json?
  bridgeCreatedAt        DateTime                 @map("bridge_created_at")
  bridgeUpdatedAt        DateTime                 @map("bridge_updated_at")
  lastActivityAt         DateTime?                @map("last_activity_at")
  bridgeRawData          Json?                    @map("bridge_raw_data")
  liquidation_address_id String?
  activities             VirtualAccountActivity[]
  liquidation_addresses  LiquidationAddress?      @relation(fields: [liquidation_address_id], references: [bridgeLiquidationId])
  profile                Profile                  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([customerId])
  @@index([bridgeVirtualAccountId])
  @@index([accountNumber])
  @@index([status])
  @@index([isActive])
  @@index([country])
  @@index([currency])
  @@map("virtual_accounts")
}

model VirtualAccountActivity {
  id                     String                       @id @default(cuid())
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  bridgeActivityId       String                       @unique @map("bridge_activity_id")
  virtualAccountId       String                       @map("virtual_account_id")
  customerId             String                       @map("customer_id")
  type                   VirtualAccountActivityType
  status                 VirtualAccountActivityStatus @default(pending)
  amount                 Decimal                      @db.Decimal(20, 8)
  currency               String                       @default("USD")
  fee                    Decimal?                     @db.Decimal(20, 8)
  description            String?
  reference              String?
  memo                   String?
  sourceAccount          String?                      @map("source_account")
  destinationAccount     String?                      @map("destination_account")
  sourceName             String?                      @map("source_name")
  destinationName        String?                      @map("destination_name")
  balanceBefore          Decimal                      @map("balance_before") @db.Decimal(20, 8)
  balanceAfter           Decimal                      @map("balance_after") @db.Decimal(20, 8)
  availableBalanceBefore Decimal                      @map("available_balance_before") @db.Decimal(20, 8)
  availableBalanceAfter  Decimal                      @map("available_balance_after") @db.Decimal(20, 8)
  bridgeCreatedAt        DateTime                     @map("bridge_created_at")
  bridgeUpdatedAt        DateTime                     @map("bridge_updated_at")
  processedAt            DateTime?                    @map("processed_at")
  errorCode              String?                      @map("error_code")
  errorMessage           String?                      @map("error_message")
  bridgeRawData          Json?                        @map("bridge_raw_data")
  virtualAccount         VirtualAccount               @relation(fields: [virtualAccountId], references: [id], onDelete: Cascade)

  @@index([virtualAccountId])
  @@index([customerId])
  @@index([bridgeActivityId])
  @@index([type])
  @@index([status])
  @@index([bridgeCreatedAt])
  @@index([processedAt])
  @@map("virtual_account_activities")
}

model CardBalanceAddition {
  id                     String                @id @default(cuid())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  cardId                 String                @map("card_id")
  profileId              String                @map("profile_id")
  amount                 Decimal               @db.Decimal(10, 2)
  currency               String                @default("USD")
  source                 BalanceAdditionSource
  method                 BalanceAdditionMethod @default(automatic)
  status                 BalanceAdditionStatus @default(pending)
  processedAt            DateTime?             @map("processed_at")
  failedAt               DateTime?             @map("failed_at")
  feeAmount              Decimal?              @map("fee_amount") @db.Decimal(10, 2)
  feeCurrency            String?               @default("USD") @map("fee_currency")
  netAmount              Decimal               @map("net_amount") @db.Decimal(10, 2)
  sourceTransactionId    String?               @map("source_transaction_id")
  sourceWalletAddress    String?               @map("source_wallet_address")
  sourceChain            String?               @map("source_chain")
  sourceCurrency         String?               @map("source_currency")
  bankAccountNumber      String?               @map("bank_account_number")
  bankName               String?               @map("bank_name")
  moonTransactionId      String?               @map("moon_transaction_id")
  moonResponse           Json?                 @map("moon_response")
  balanceBefore          Decimal               @map("balance_before") @db.Decimal(10, 2)
  balanceAfter           Decimal               @map("balance_after") @db.Decimal(10, 2)
  availableBalanceBefore Decimal               @map("available_balance_before") @db.Decimal(10, 2)
  availableBalanceAfter  Decimal               @map("available_balance_after") @db.Decimal(10, 2)
  description            String?
  notes                  String?
  tags                   String[]              @default([])
  errorCode              String?               @map("error_code")
  errorMessage           String?               @map("error_message")
  retryCount             Int                   @default(0) @map("retry_count")
  initiatedBy            String?               @map("initiated_by")
  approvedBy             String?               @map("approved_by")
  card                   Card                  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  profile                Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@index([profileId])
  @@index([status])
  @@index([source])
  @@index([createdAt])
  @@index([processedAt])
  @@index([sourceTransactionId])
  @@index([moonTransactionId])
  @@map("card_balance_additions")
}

model SystemConfig {
  id             String                @id @default(cuid())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  key            String                @unique
  name           String
  description    String?
  type           ConfigType
  status         ConfigStatus          @default(active)
  value          Json
  defaultValue   Json?
  minValue       Json?
  maxValue       Json?
  allowedValues  Json?
  validationRule String?
  category       String?
  tags           String[]              @default([])
  lastModifiedBy String?               @map("last_modified_by")
  lastModifiedAt DateTime?             @map("last_modified_at")
  events         Event[]
  configHistory  SystemConfigHistory[]

  @@index([key])
  @@index([type])
  @@index([status])
  @@index([category])
  @@map("system_configs")
}

model SystemConfigHistory {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  configId     String       @map("config_id")
  oldValue     Json?        @map("old_value")
  newValue     Json         @map("new_value")
  changeReason String?      @map("change_reason")
  modifiedBy   String       @map("modified_by")
  modifiedAt   DateTime     @default(now()) @map("modified_at")
  config       SystemConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([modifiedAt])
  @@map("system_config_history")
}

model FeeConfig {
  id             String             @id @default(cuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  feeType        FeeType            @map("fee_type")
  name           String
  description    String?
  amount         Decimal            @db.Decimal(10, 4)
  currency       String             @default("USD")
  feeStructure   String             @default("percentage") @map("fee_structure")
  minAmount      Decimal?           @map("min_amount") @db.Decimal(10, 2)
  maxAmount      Decimal?           @map("max_amount") @db.Decimal(10, 2)
  isActive       Boolean            @default(true) @map("is_active")
  appliesTo      String[]           @default([]) @map("applies_to")
  excludedFrom   String[]           @default([]) @map("excluded_from")
  category       String?
  tags           String[]           @default([])
  lastModifiedBy String?            @map("last_modified_by")
  lastModifiedAt DateTime?          @map("last_modified_at")
  events         Event[]
  feeHistory     FeeConfigHistory[]

  @@index([feeType])
  @@index([isActive])
  @@index([category])
  @@map("fee_configs")
}

model FeeConfigHistory {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  feeId        String    @map("fee_id")
  oldAmount    Decimal?  @map("old_amount") @db.Decimal(10, 4)
  newAmount    Decimal   @map("new_amount") @db.Decimal(10, 4)
  oldCurrency  String?   @map("old_currency")
  newCurrency  String    @map("new_currency")
  changeReason String?   @map("change_reason")
  modifiedBy   String    @map("modified_by")
  modifiedAt   DateTime  @default(now()) @map("modified_at")
  fee          FeeConfig @relation(fields: [feeId], references: [id], onDelete: Cascade)

  @@index([feeId])
  @@index([modifiedAt])
  @@map("fee_config_history")
}

model CryptoDepositConfig {
  id                  String                 @id @default(cuid())
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  chainId             String                 @unique @map("chain_id")
  chainName           String                 @map("chain_name")
  displayName         String                 @map("display_name")
  isEnabled           Boolean                @default(true) @map("is_enabled")
  depositInstructions String                 @map("deposit_instructions")
  minimumAmount       Decimal?               @map("minimum_amount") @db.Decimal(20, 8)
  maximumAmount       Decimal?               @map("maximum_amount") @db.Decimal(20, 8)
  networkFee          Decimal?               @map("network_fee") @db.Decimal(20, 8)
  processingTime      String                 @map("processing_time")
  riskLevel           RiskLevel              @default(low) @map("risk_level")
  iconUrl             String?                @map("icon_url")
  explorerUrl         String?                @map("explorer_url")
  supportedTokens     Json                   @default("[]") @map("supported_tokens")
  lastModifiedBy      String?                @map("last_modified_by")
  lastModifiedAt      DateTime?              @map("last_modified_at")
  depositHistory      CryptoDepositHistory[]

  @@index([chainId])
  @@index([isEnabled])
  @@index([riskLevel])
  @@map("crypto_deposit_configs")
}

model CryptoDepositHistory {
  id           String              @id @default(cuid())
  createdAt    DateTime            @default(now())
  configId     String              @map("config_id")
  changeType   String              @map("change_type")
  oldValues    Json?               @map("old_values")
  newValues    Json                @map("new_values")
  changeReason String?             @map("change_reason")
  modifiedBy   String              @map("modified_by")
  modifiedAt   DateTime            @default(now()) @map("modified_at")
  config       CryptoDepositConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([modifiedAt])
  @@index([changeType])
  @@map("crypto_deposit_history")
}

model DepositQrRequest {
  id                String          @id @default(cuid())
  profileId         String          @map("profile_id")
  bridgeCustomerId  String          @map("bridge_customer_id")
  targetWalletId    String          @map("target_wallet_id")
  qrReferenceId     String          @unique @map("qr_reference_id")
  amountBs          Decimal         @map("amount_bs") @db.Decimal(12, 2)
  amountUsd         Decimal         @map("amount_usd") @db.Decimal(12, 6)
  exchangeRate      Decimal         @map("exchange_rate") @db.Decimal(10, 4)
  status            QrDepositStatus @default(PENDING)
  priority          QrPriority      @default(HIGH)
  verificationCount Int             @default(0) @map("verification_count")
  lastVerifiedAt    DateTime?       @map("last_verified_at")
  expiresAt         DateTime        @map("expires_at")
  paidAt            DateTime?       @map("paid_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  metadata          Json?
  bank_name         String?
  bank_reference    String?
  conversion_rate   Decimal         @db.Decimal(10, 6)
  fee_amount        Decimal?        @db.Decimal(12, 6)
  profile           Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  targetWallet      Wallet          @relation(fields: [targetWalletId], references: [id])

  @@index([status, priority, lastVerifiedAt])
  @@index([profileId, status])
  @@index([qrReferenceId])
  @@map("deposit_qr_requests")
}

model QrAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  totalGenerated    Int      @default(0) @map("total_generated")
  totalPaid         Int      @default(0) @map("total_paid")
  avgPaymentTimeMin Int?     @map("avg_payment_time_min")
  successRate       Decimal? @map("success_rate") @db.Decimal(5, 4)
  apiCallsCount     Int      @default(0) @map("api_calls_count")
  avgResponseTimeMs Int?     @map("avg_response_time_ms")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  avg_amount_usd    Decimal? @db.Decimal(10, 6)
  total_amount_bs   Decimal? @db.Decimal(15, 2)
  total_amount_usd  Decimal? @db.Decimal(15, 6)
  unique_users      Int?     @default(0)

  @@map("qr_analytics")
}

model bridge_webhook_logs {
  id            String    @id
  event_type    String
  event_id      String    @unique
  customer_id   String?
  payload       Json
  processed_at  DateTime?
  status        String    @default("pending")
  error_message String?
  createdAt     DateTime  @default(now())

  @@index([customer_id])
  @@index([event_type])
  @@index([status])
}

model liquidation_drains {
  id                       String             @id
  createdAt                DateTime           @default(now())
  updatedAt                DateTime
  bridge_drain_id          String             @unique
  liquidation_address_id   String
  customer_id              String
  amount                   String
  currency                 String
  destination_address      String
  chain                    String
  transaction_hash         String?
  state                    String
  bridge_created_at        DateTime
  bridge_updated_at        DateTime
  fee_amount               String?
  fee_currency             String?
  destination_payment_rail String?
  destination_currency     String?
  bridge_raw_data          Json?
  liquidation_addresses    LiquidationAddress @relation(fields: [liquidation_address_id], references: [bridgeLiquidationId])

  @@index([bridge_created_at])
  @@index([bridge_drain_id])
  @@index([customer_id])
  @@index([liquidation_address_id])
  @@index([state])
}

model qr_generation_logs {
  id               String             @id
  user_id          String
  profile_id       String
  wallet_id        String
  transfer_id      String             @unique
  qr_alias         String             @unique
  usd_amount       Decimal            @db.Decimal(12, 6)
  bob_amount       Decimal            @db.Decimal(12, 2)
  exchange_rate    Decimal            @db.Decimal(10, 4)
  description      String?
  wallet_address   String
  wallet_name      String?
  expiration_hours Int                @default(24)
  status           QrGenerationStatus @default(PENDING)
  qr_image_data    String?
  expires_at       DateTime
  paid_at          DateTime?
  cancelled_at     DateTime?
  generated_at     DateTime           @default(now())
  created_at       DateTime           @default(now())
  updated_at       DateTime
  metadata         Json?

  @@index([expires_at])
  @@index([generated_at])
  @@index([profile_id])
  @@index([qr_alias])
  @@index([status])
  @@index([transfer_id])
  @@index([user_id])
  @@index([wallet_id])
}

model transfer_sync_status {
  id              String             @id
  createdAt       DateTime           @default(now())
  updatedAt       DateTime
  profile_id      String
  source_type     TransferSyncSource
  source_id       String
  last_sync_at    DateTime
  last_sync_count Int                @default(0)
  sync_status     String             @default("success")
  error_message   String?
  next_page_token String?
  profiles        Profile            @relation(fields: [profile_id], references: [id])

  @@unique([profile_id, source_type, source_id])
  @@index([last_sync_at])
  @@index([profile_id])
  @@index([source_type])
  @@index([sync_status])
}

model user_preferences {
  id                  String   @id
  profile_id          String   @unique
  defaultWalletView   String   @default("consolidated")
  preferred_language  String   @default("es")
  preferred_currency  String   @default("USD")
  push_notifications  Boolean  @default(true)
  email_notifications Boolean  @default(true)
  transaction_alerts  Boolean  @default(true)
  require_pin_on_open Boolean  @default(false)
  session_timeout     Int      @default(300)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  profiles            Profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
}

model user_sessions {
  id            String   @id
  profile_id    String
  session_token String   @unique
  device_id     String
  device_type   String
  is_active     Boolean  @default(true)
  last_activity DateTime
  expires_at    DateTime
  createdAt     DateTime @default(now())
  profiles      Profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@index([profile_id])
  @@index([session_token])
}

enum WalletChain {
  solana
  base
}

enum WalletTag {
  general_use
  p2p
}

enum UserRole {
  USER
  SUPERADMIN
  ADMIN
}

enum UserStatus {
  active
  disabled
  deleted
}

enum KYCStatus {
  active
  awaiting_questionnaire
  awaiting_ubo
  incomplete
  not_started
  offboarded
  paused
  rejected
  under_review
}

enum CustomerType {
  individual
  business
}

enum ExpectedMonthlyPaymentsUSD {
  zero_4999
  five_thousand_9999
  ten_thousand_49999
  fifty_thousand_plus
}

enum EmploymentStatus {
  employed
  homemaker
  retired
  self_employed
  student
  unemployed
}

enum AccountPurpose {
  charitable_donations
  ecommerce_retail_payments
  investment_purposes
  operating_a_company
  other
  payments_to_friends_or_family_abroad
  personal_or_living_expenses
  protect_wealth
  purchase_goods_and_services
  receive_payment_for_freelancing
  receive_salary
}

enum SourceOfFunds {
  salary
  business_income
  investment_returns
  inheritance
  government_benefits
  loans
  other
}

enum DocumentType {
  drivers_license
  matriculate_id
  military_id
  national_id
  passport
  permanent_residency_id
  state_or_provisional_id
  visa
}

enum DocumentPurpose {
  proof_of_account_purpose
  proof_of_address
  proof_of_individual_name_change
  proof_of_relationship
  proof_of_source_of_funds
  proof_of_source_of_wealth
  proof_of_tax_identification
  other
}

enum EndorsementType {
  base
  sepa
  spei
}

enum CapabilityStatus {
  pending
  active
  inactive
  rejected
}

enum EndorsementStatus {
  incomplete
  approved
  revoked
}

enum EventType {
  USER_SIGNED_UP
  USER_SUBMITTED_KYC
  USER_KYC_UNDER_VERIFICATION
  USER_KYC_APPROVED
  USER_KYC_REJECTED
  USER_WALLET_CREATED
  USER_CARD_CREATED
  SYSTEM_CONFIG_UPDATED
  SYSTEM_CONFIG_CREATED
  SYSTEM_CONFIG_DELETED
}

enum EventModule {
  AUTH
  KYC
  PROFILE
  WALLET
  SYSTEM_CONFIG
}

enum ConfigType {
  FEE
  LIMIT
  FEATURE_FLAG
  INTEGRATION_SETTING
}

enum FeeType {
  DEVELOPER_FEE
  CREDIT_CARD_EMISSION_FEE
  TRANSACTION_FEE
  WITHDRAWAL_FEE
  DEPOSIT_FEE
}

enum ConfigStatus {
  active
  inactive
  deprecated
}

enum ExternalAccountType {
  us
  iban
  swift
  clabe
}

enum CheckingOrSavings {
  checking
  savings
}

enum VirtualAccountStatus {
  active
  inactive
  suspended
  closed
}

enum VirtualAccountType {
  iban
  account_number
  routing_number
}

enum VirtualAccountActivityType {
  credit
  debit
  fee
  adjustment
  reversal
}

enum VirtualAccountActivityStatus {
  pending
  completed
  failed
  cancelled
}

enum BalanceAdditionStatus {
  pending
  processing
  completed
  failed
  cancelled
}

enum BalanceAdditionSource {
  crypto_deposit
  bank_transfer
  card_top_up
  refund
  adjustment
  bonus
  other
}

enum BalanceAdditionMethod {
  automatic
  manual
  api
  dashboard
}

enum RiskLevel {
  low
  medium
  high
}

enum QrDepositStatus {
  PENDING
  PAID_UNCONFIRMED
  TRANSFERRING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
}

enum QrPriority {
  HIGH
  MEDIUM
  LOW
  CLEANUP
}

enum QrGenerationStatus {
  PENDING
  PAID
  EXPIRED
  CANCELLED
  ERROR
}

enum TransferSyncSource {
  bridge_transfer
  wallet_transaction
  liquidation_drain
}
